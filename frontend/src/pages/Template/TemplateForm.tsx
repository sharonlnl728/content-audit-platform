import React, { useEffect, useState } from 'react';
import {
  Modal,
  Form,
  Input,
  Switch,
  Button,
  Typography,
  Divider,
  Row,
  Col,
  Select,
  App
} from 'antd';
import { motion } from 'framer-motion';
import api from '../../api';

const { Title, Text } = Typography;
const { TextArea } = Input;

interface AuditTemplate {
  id?: number;
  templateId?: string;
  name: string;
  version?: string;
  description?: string;
  contentType?: string;
  industry?: string;
  decisionLogic?: string;
  aiPromptTemplate?: string;
  metadata?: string;
  isDefault: boolean;
  isActive: boolean;
}

interface TemplateFormProps {
  visible: boolean;
  template?: AuditTemplate | null;
  onCancel: () => void;
  onSuccess: () => void;
}

const TemplateForm: React.FC<TemplateFormProps> = ({
  visible,
  template,
  onCancel,
  onSuccess
}) => {
  const { message } = App.useApp();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (visible && template) {
      form.setFieldsValue({
        name: template.name,
        version: template.version,
        description: template.description,
        contentType: template.contentType,
        industry: template.industry,
        isDefault: template.isDefault,
        isActive: template.isActive,
      });
    } else if (visible) {
      form.resetFields();
    }
  }, [visible, template, form]);

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      setLoading(true);

      if (template?.id) {
        // Update template
        const updateData = {
          ...template,
          ...values
        };
        
        const response = await api.updateTemplate(template.id, updateData);
        message.success('Template updated successfully');
      } else {
        // Create new template
        const createData = {
          ...values,
          // templateId will be automatically generated by backend based on name
          version: values.version || 'v1.0',
          description: values.description || '',
          contentType: values.contentType || 'TEXT',
          industry: values.industry || '',
          isDefault: false,
          isActive: true
        };
        const response = await api.createTemplate(createData);
        
        if (response?.data?.code === 200) {
          message.success('Template created successfully');
        } else {
          throw new Error(`API Error: ${response?.data?.message || 'Unknown error'}`);
        }
      }
      
      onSuccess();
    } catch (error: any) {
      console.error('Template operation failed:', error);
      message.error(`Template operation failed: ${error.message || 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title={
        <Title level={4} className="text-slate-800 mb-0">
          {template ? 'Edit Template' : 'Create Template'}
        </Title>
      }
      open={visible}
      onCancel={onCancel}
      footer={null}
      width={800}
      className="template-form-modal"
    >
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          className="space-y-4"
        >
          <Row gutter={16}>
            <Col span={24}>
              <Form.Item
                name="name"
                label={<Text className="text-slate-700 font-medium">Template Name</Text>}
                rules={[{ required: true, message: 'Please enter template name' }]}
                extra={<Text className="text-slate-500 text-sm">Template ID will be automatically generated (e.g., TPL-TEST for "test")</Text>}
              >
                <Input 
                  placeholder="e.g., Landing Page Content Moderation"
                  className="border-slate-300 text-slate-800 placeholder-slate-400"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="version"
                label={<Text className="text-slate-700 font-medium">Version</Text>}
              >
                <Input 
                  placeholder="e.g., v1.0"
                  className="border-slate-300 text-slate-800 placeholder-slate-400"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="contentType"
                label={<Text className="text-slate-700 font-medium">Content Type</Text>}
              >
                <Select
                  placeholder="Select content type"
                  className="border-slate-300"
                  options={[
                    { label: 'Text', value: 'TEXT' },
                    { label: 'Image', value: 'IMAGE' },
                    { label: 'Video', value: 'VIDEO' },
                    { label: 'Mixed', value: 'MIXED' }
                  ]}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="industry"
                label={<Text className="text-slate-700 font-medium">Industry</Text>}
              >
                <Input 
                  placeholder="e.g., E-commerce, Finance"
                  className="border-slate-300 text-slate-800 placeholder-slate-400"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="isDefault"
                label={<Text className="text-slate-700 font-medium">Default Template</Text>}
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="description"
            label={<Text className="text-slate-700 font-medium">Description</Text>}
          >
            <TextArea 
              rows={3}
              placeholder="Describe the purpose and scope of this template..."
              className="border-slate-300 text-slate-800 placeholder-slate-400"
            />
          </Form.Item>

          <Form.Item
            name="isActive"
            label={<Text className="text-slate-700 font-medium">Active</Text>}
            valuePropName="checked"
          >
            <Switch />
          </Form.Item>

          <Divider className="border-slate-200" />

          <div className="flex justify-end space-x-3">
            <Button onClick={onCancel} className="border-slate-300 text-slate-700 hover:bg-slate-50">
              Cancel
            </Button>
            <Button 
              type="primary" 
              htmlType="submit" 
              loading={loading}
              className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 border-0"
            >
              {template ? 'Update' : 'Create'}
            </Button>
          </div>
        </Form>
      </motion.div>
    </Modal>
  );
};

export default TemplateForm; 